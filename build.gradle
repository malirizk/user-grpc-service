buildscript {
    repositories {
        google()
        mavenCentral()
    }

    ext {
        grpcVersion = '1.46.0'
        protobufVersion = '3.21.5'
        protobufGradlePluginVersion = '0.8.19'
        springBootVersion = '2.6.7'
        springBootGrpcVersion = '2.13.1.RELEASE'
		springDepManagVersion = '1.0.12.RELEASE'
        mapstructVersion = '1.5.2.Final'
        lombokMapstructBindingVersion = '0.2.0'
        javaxValidationVersion = '2.0.1.Final'
        commonsLang3Version = '3.12.0'
        springActiveProfile = 'dev'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version "${springDepManagVersion}"
    id 'com.google.protobuf' version "${protobufGradlePluginVersion}"
    id 'jacoco'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        google()
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.8.7'
    }
}

allprojects { project ->
    buildscript {
        dependencyManagement {
            imports {
                mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
                mavenBom "com.google.protobuf:protobuf-bom:${protobufVersion}"
                mavenBom "io.grpc:grpc-bom:${grpcVersion}"
            }
        }
    }

    group = 'com.user-grpc-service'
    version = '0.0.1-SNAPSHOT'

    test {
        useJUnitPlatform()
        systemProperty "file.encoding", "utf-8"
        testLogging {
            exceptionFormat = 'full'
            showCauses = true
            showExceptions = true
            showStackTraces = true
            showStandardStreams = false
            it.events('passed', 'skipped', 'failed')
        }
        finalizedBy(rootProject.jacocoTestReport)
    }

    jacocoTestReport {
        dependsOn test

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "com/usergrpcservice/grpc/**/model/**",
                        "com/usergrpcservice/grpc/**/exception/**",
                        "com/usergrpcservice/grpc/**/config/**"
                ])
            }))
        }
    }
}

dependencies {
    api project(':user-grpc-lib')
    api project(':user-grpc-server')
    api project(':user-grpc-client')
}